//给其他学生端机器发文件的代码
//
//由于所有版本极域都会检查数据包发送者，
//这段代码只能在教师机上成功发送文件
//因此它没有任何实际用处
//
//by zouxiaofei1 2015 - 2020
//

//另:给别人发送文本文档的命令:
//cmd.exe \"/c echo|set /p=\"xxxxxx\">>c:\\a\\1.txt\"
#pragma once
#include "stdafx.h"

wchar_t RFPath[260] = L"<FOLDER_DESKTOP>", MFName[260], RFName[260];//对方文件路径和我方文件路径

void filestart2(bool start)//在发送文件前需要执行这个函数
{
	WORD wVersionRequested;
	WSADATA wsaData;
	int err;

	wVersionRequested = MAKEWORD(1, 1);

	err = WSAStartup(wVersionRequested, &wsaData);
	if (err != 0)return;

	if (LOBYTE(wsaData.wVersion) != 1 ||
		HIBYTE(wsaData.wVersion) != 1)
	{
		WSACleanup();
		return;
	}
	SOCKET sockClient = socket(AF_INET, SOCK_DGRAM, 0);
	SOCKADDR_IN addrSrv;

	addrSrv.sin_addr.S_un.S_addr = inet_addr("225.2.2.1");

	addrSrv.sin_family = AF_INET;
	addrSrv.sin_port = htons(5512);

	char bb[] = { 0x4d,0x45,0x53,0x53,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xc0,0xa8,0x3d,0x80,0x2d,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xa8,0x3d,0x81,0xa6,0x15,0xe1,0x02,0x02,0x0c,0xa9,0x15,0x00,0x50,0x00,0x00,0xa0,0x05,0x00,0x00,0x10,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00 };
	char aa[] = { 0x4d,0x45,0x53,0x53,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0 };
	char cc[] = { 0x41,0x4e,0x4e,0x4f,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xa8,0x3d,0x81,0x98,0xc7,0x83,0x08,0x00,0x00,0x00,0x00,0x98,0xc7,0x83,0x08,0x01,0x00,0x00,0x00,0x68,0x64,0x3b,0xa5,0xf0,0x6c,0x18,0x00,0xa8,0xc7,0x83,0x08,0xf4,0x3f,0x18,0x00,0xf0,0x3f,0x18,0x00,0x64,0x60,0x18,0x00,0x00,0x00,00,00,00,00,00,00 };
	char dd[] = { 0x3e,0x31,0x00,0x00,0xc0,0xa8,0x3d,0x80,0x02,0x00,0x00,00,0x01,0x00,00,00 };


	if (start)
		sendto(sockClient, bb, 61, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR)),
		sendto(sockClient, cc, 72, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));
	else
		sendto(sockClient, aa, 25, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));

	//Sleep(1000);
	closesocket(sockClient);
	WSACleanup();
	return;
}

void file2016(int pingdao)
{
	//char paath[513] = "C:\\Users\\ABC\\Desktop\\1.ini";
	char* str_tmp;
	FILE* f;
	long length;
	//以二进制形式打开文件
	f = _wfopen(MFName, L"rb");
	if (NULL == f)return;
	//把文件的位置指针移到文件尾
	fseek(f, 0, SEEK_END);
	//获取文件长度;
	length = ftell(f);
	//把文件的位置指针移到文件开头
	fseek(f, 0, SEEK_SET);
	str_tmp = new char[length + 1500];
	fread(str_tmp, 1, length, f);
	str_tmp[length] = '\0';
	fclose(f);
	//s(str_tmp);

	WORD wVersionRequested;
	WSADATA wsaData;
	int err;

	wVersionRequested = MAKEWORD(1, 1);


	err = WSAStartup(wVersionRequested, &wsaData);
	if (err != 0)return;

	if (LOBYTE(wsaData.wVersion) != 1 ||
		HIBYTE(wsaData.wVersion) != 1)
	{
		WSACleanup();
		return;
	}
	SOCKET sockClient = socket(AF_INET, SOCK_DGRAM, 0);
	SOCKADDR_IN addrSrv;

	char a[30] = "225.2.", b[10] = { 0 };
	itoa(pingdao + 1, b, 10);
	strcat_s(a, b);
	strcat_s(a, ".12");
	//s(a);
	addrSrv.sin_addr.S_un.S_addr = inet_addr(a);
	addrSrv.sin_family = AF_INET;
	addrSrv.sin_port = htons(5033 + 512 * pingdao);

	char aa[1455] = { 0xad,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0xc5,0x10,0x59,0x00,
					  0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,
					  0x00,0x00,0x1f,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x91,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					  0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x20,0x00,0x00,0x00,0x15,0x00,0x00,
					  0x00,0x01,0x00,0x00,0x00
	};

	char bb[1455] = { 0xad,0x13,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0xa0,0x85 };


	int beg = 45, lel = wcslen(RFPath), ls2 = wcslen(MFName);
	s(RFPath);
	for (int i = 0; i < lel; ++i)
	{
		aa[beg] = RFPath[i] - ((RFPath[i] >> 8) << 8);
		aa[beg + 1] = RFPath[i] >> 8;
		beg += 2;
	}
	aa[beg] = 0x5c;

	for (int i = ls2 - 1; i >= 0; --i)
		if (MFName[i] == L'\\') { lel = i + 1; break; }
	beg = 581;
	for (int i = lel; i < ls2; ++i)
	{
		aa[beg] = MFName[i] - ((MFName[i] >> 8) << 8);
		aa[beg + 1] = MFName[i] >> 8;
		beg += 2;
	}
	//	if (length > 100000)length += 1000;
		//length = 123456789;
	{
		aa[568] = aa[40] = aa[36] = length >> 24;
		aa[567] = aa[39] = aa[35] = (length >> 16) - ((length >> 24) << 8);
		aa[566] = aa[38] = aa[34] = (length >> 8) - ((length >> 16) << 8);
		aa[565] = aa[37] = aa[33] = length - ((length >> 8) << 8);
	}
	//int l2 = length;
	/*if (length > 137152)
	{
		l2 = 137152;
		aa[25] = 0;
		aa[40]  = l2 >> 24;
		aa[39] = (l2 >> 16) - ((l2 >> 24) << 8);
		aa[38] = (l2 >> 8) - ((l2 >> 16) << 8);
		aa[37] = l2 - ((l2 >> 8) << 8);
	}*/
	int tm = length + 536;

	{
		aa[44] = tm >> 24;
		aa[43] = (tm >> 16) - ((tm >> 24) << 8);
		aa[42] = (tm >> 8) - ((tm >> 16) << 8);
		aa[41] = tm - ((tm >> 8) << 8);
	}
	//	if (length > 100000)length -= 1000;

	aa[0] = bb[0] = (char)GetTickCount();
	aa[1] = bb[1] = (char)(GetTickCount() * 2);
	if (length <= 352)
	{
		if (length <= 191)
		{
			aa[11] = 0x40 + length;
			aa[12] = 0xe4;
		}//当小于352字节时直接发完结束
		else
		{
			aa[11] = length - 192;
			aa[12] = 0xe5;
		}
		for (int i = 0; i < length; ++i)aa[1101 + i] = str_tmp[i];
		sendto(sockClient, aa, 1101 + length, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));
		return;
	}
	//s(0);
	//发送正常情况下的首条信息
	for (int i = 0; i < 352; ++i)aa[1101 + i] = str_tmp[i];
	sendto(sockClient, aa, 1453, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));
	//s(length);
	length += 1440;
	int cur = 353, times = 0, times2 = 0, times3 = 0;//cur=x表示下一个要发送的数据为str[x-1]
	while (1)
	{
		++times; ++times3; if (times > 115)times = 0, ++times2;
		bb[10] = times;
		bb[6] = times2 - (times2 >> 8 << 8);
		bb[7] = times2 >> 8;
		bb[4] = times3 - (times3 >> 8 << 8);
		bb[5] = (times3 - (times3 >> 16 << 16)) >> 8;
		if (length - cur < 1440)break;
		if (times >= 96)
		{
			bb[11] = 0x56; bb[12] = 0x0d;
			for (int i = 13; i < 1453; ++i)bb[i] = i;
		}
		else
		{
			bb[11] = 0xa0;
			//if (times == 0)
			//{
			//	Sleep(90);
			//	//filestart(0, 1);
			//	
			//	bb[12] = 0xc5;
			//	int l3 = 137688;
			//	for (int i = 13; i < 565; ++i)bb[i] = aa[i];
			//	bb[17] = times2+1;
			//	l2 += 137688;
			//	if (l2 > length)
			//	{
			//		l2 -= 137688;
			//		l3 = length - l2;
			//		l2 = length;
			//		bb[25] = 1;
			//	}
			//	bb[40] = l2 >> 24;
			//	bb[39] = (l2 >> 16) - ((l2 >> 24) << 8);
			//	bb[38] = (l2 >> 8) - ((l2 >> 16) << 8);
			//	bb[37] = l2 - ((l2 >> 8) << 8);

			//	bb[44] = l3 >> 24;
			//	bb[43] = (l3 >> 16) - ((l3 >> 24) << 8);
			//	bb[42] = (l3 >> 8) - ((l3 >> 16) << 8);
			//	bb[41] = l3 - ((l3 >> 8) << 8);
			//	for (int i = 565; i < 1453; ++i)bb[i] = str_tmp[cur - 1], ++cur;

			//}
			//else
			{
				bb[12] = 0x85;
				for (int i = 13; i < 1453; ++i)bb[i] = str_tmp[cur - 1], ++cur;
			}
		}
		sendto(sockClient, bb, 1453, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));
	}
	bb[11] = 0x0c; bb[12] = 0xa2;
	//bb[11] = 0xa0; bb[12] = 0x85;
	int i = 13, l22 = length - cur + 14;
	while (cur <= length)
	{
		bb[i] = str_tmp[cur - 1]; ++cur; ++i;
	}
	//s(l22);
	sendto(sockClient, bb, 1453, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));
	int ff = 1;
	while (1)
	{
		++times; ++times3; if (times > 115)break;
		bb[10] = times;
		bb[6] = times2 - (times2 >> 8 << 8);
		bb[7] = times2 >> 8;
		bb[4] = times3 - (times3 >> 8 << 8);
		bb[5] = (times3 - (times3 >> 16 << 16)) >> 8;
		//if (length - cur < 1440)break;
		if (times >= 96)
		{
			//bb[11] = 0x56; bb[12] = 0x0d;
			for (int i = 11; i < 1453; ++i)bb[i] = rand();
		}
		else
		{
			bb[11] = 0xa0;
			if (ff == 1)
				bb[12] = 0xc5, ff = 0; else
				bb[12] = 0x85;
			for (int i = 13; i < 1453; ++i)bb[i] = 0;
		}
		sendto(sockClient, bb, 1453, 0, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));
	}
	closesocket(sockClient);
	WSACleanup();
	delete[]str_tmp;
	return;
}